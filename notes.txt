1.Console Methods:
------------------
assert()-->Writes an error message to the console if the assertion is false
clear()--->Clears the console
count()--->Logs the number of times that this particular call to count() has been called
error()--->Outputs an error message to the console
group()--->Creates a new inline group in the console. This indents following console messages by an additional level, until console.groupEnd() is called
groupCollapsed()-->Creates a new inline group in the console. However, the new group is created collapsed. The user will need to use the disclosure button to expand it
groupEnd()-->Exits the current inline group in the console
info()--->Outputs an informational message to the console
log()---->Outputs a message to the console
table()-->Displays tabular data as a table
time()--->Starts a timer (can track how long an operation takes)
timeEnd()->Stops a timer that was previously started by console.time()
trace()-->Outputs a stack trace to the console
warn()--->Outputs a warning message to the console

2.Var,Let and Const:
--------------------
-->var: The scope of a variable defined with the keyword “var” is limited to the “function” within which it is defined. If it is defined outside any function, the scope of the variable is global.
var is “function scoped”.

-->let: The scope of a variable defined with the keyword “let” or “const” is limited to the “block” defined by curly braces i.e. {} .
“let” and “const” are“block scoped”.

-->const: The scope of a variable defined with the keyword “const” is limited to the block defined by curly braces. However if a variable is defined with keyword const, it cannot be reassigned.
“const” cannot be re-assigned to a new value. However it CAN be mutated.

3.Datatypes in JavaScript:
--------------------------
number--> for numbers of any kind: integer or floating-point, integers are limited by ±253.
string--> for strings. A string may have zero or more characters, there’s no separate single-character type.
boolean-->for true/false.
null----> for unknown values – a standalone type that has a single value null.
undefined-> for unassigned values – a standalone type that has a single value undefined.
object--> for more complex data structures.
symbol--> for unique identifiers.


